var doc = BsonDocument.Parse("{ a: 1, b: [{ c: 1 }] }");  to get bson from json



### Ignoring Extra Elements
[BsonIgnoreExtraElements]
public MyClass 
{
    // fields and properties
}  

or

BsonClassMap.RegisterClassMap<MyClass>(cm => 
{
    cm.AutoMap();
    cm.SetIgnoreExtraElements(true);
});

### Supporting Extra Elements

public MyClass 
{
    // fields and properties
    [BsonExtraElements]
    public BsonDocument CatchAll { get; set; }
}

####   [BsonDateTimeOptions(DateOnly = true)]


####  Enums
Another case that deserves mention is enums. Enums are, by default, represented as their underlying value. In other words, a plain enum will be represented as an integer value. However, it is possible to instruct the driver to represent an enum as a string.

public enum Color
{
    Blue,
    Other
}

public class Person 
{
    [BsonRepresentation(BsonType.String)]
    public Color FavoriteColor { get; set; }
}

###
FilterDefinition<BsonDocument> filter = "{ x: 1 }";

// or

FilterDefinition<BsonDocument> filter = new BsonDocument("x", 1);